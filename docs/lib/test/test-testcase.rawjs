/**
 * !!! THIS FILE REQUIRES THE ADDITIONAL SYNTAX RESTRICTIONS !!!
 */
export default [

    ({ fieldset, legend, section, button, label, input, output, style }) => {
        const alertbutton = button({
            onclick : ({
                type,
                target : { tagName },
                constructor : { name }
            }) => alert([tagName, type, name, 'handler!'].join(' ')),
            children : 'Show me alert, please...',
            style : { marginRight: '10px' }
        });
        const noalertbox = label([
            input({
                type : 'checkbox',
                onchange : ({ target }) => {
                    alertbutton.disabled = target.checked;
                },
            }),
            ' no alerts!'
        ]);
        const focusbutton = button({
            onfocus : ({ target }) => target.textContent = 'Focused!',
            onblur : ({ target }) => target.textContent = 'Focus wait...',
            textContent : 'Focus wait...'
        });
        const charcountbox = label([
            input({
                placeholder : 'text input char counter',
                oninput : ({ target }) => {
                    charcountbox.lastChild.value = target.value.length;
                },
                style : { marginRight: '10px' }
            }),
            output({ title : 'entered char count', value : '0' })
        ]);
        return fieldset([
            legend('Event handlers'),
            section([alertbutton, noalertbox]),
            section(focusbutton),
            section(charcountbox),
            style('section { margin: 20px 0 }')
        ]);
    },

    ({ style, dl, dt, dd, abbr, ins, del, b, s, em, code }) =>
        dl([
            style('* { font-size: 30px }'),
            dt('Abbreviations'),
            dd([
                abbr({
                    title : 'Extensible markup language',
                    children : 'XML'
                }),
                ' ',
                abbr({
                    title : 'Scalable vector graphics',
                    children : 'SVG'
                }),
                ' ',
                abbr({
                    title : 'Interface definition language',
                    children : 'IDL'
                })
            ]),
            dt('Edits'),
            dd([ins('Inserted'), ' and ', del('deleted'), ' text']),
            dt('Code keywords'),
            dd(code([b('var'), ' ', b('function'), ' ', b('export'), ' ', b('const')])),
            dt('Other'),
            dd([s('don\'t stroke me!'), ' + ', em('emphasize!')])
        ]),

    ({ form, label, img, br, input, button }) =>
        form({
            action : 'https://yandex.ru/search',
            target : '_blank',
            children : [
                label([
                    img({
                        src : 'http://bit.ly/2dgU2dO',
                        alt : 'Яндекс',
                        width : 50
                    }),
                    br(),
                    input({
                        type : 'search',
                        name : 'text'
                    }),
                    ' '
                ]),
                button('Найти')
            ]
        }),

    ({ fieldset, legend, input }) =>
        fieldset([
            legend('Authorization'),
            input({
                placeholder : 'login',
                style : { marginRight : '5px' }
            }),
            input({
                type : 'password',
                placeholder : 'password'
            })
        ]),

    ({ article, h4, img, audio, video }) =>
        article({
            title : 'Media',
            children : [
                h4('Image media'),
                img({
                    src : 'http://bit.ly/2e9kIdg',
                    alt : 'Crazy PiPi!',
                    width: 100
                }),
                h4('Audio media'),
                audio({
                    controls : true,
                    src : 'http://bit.ly/2e2HCo5'
                }),
                h4('Video media'),
                video({
                    controls : true,
                    width : '200',
                    src : 'http://bit.ly/2ecsnvQ'
                })
            ]
        }),

    ({ div, ul, li, bdi, bdo }) => {
        const children = 'АРОЗАУПАЛА';
        return div([
            div([
                children,
                'Н',
                bdo({ dir : 'rtl', children })
            ]),
            ul([
                li([
                    'User ',
                    bdi('jcranmer'),
                    ': 12 posts.'
                ]),
                li([
                    'User ',
                    bdi('hober'),
                    ': 5 posts.'
                ]),
                li([
                    'User ',
                    bdi('إيان'),
                    ': 3 posts.'
                ])
            ])
        ])
    },

    ({ footer, address, small }) =>
        footer([
            address('vv.aristov@gmail.com'),
            small('@ All rights free')
        ]),

    ({ main, sup, sub, i, strong }) =>
        main([
            'Here comes ',
            sup('supertext'),
            ' and ',
            sub('subtext'),
            '. Later they are followed by ',
            i('alternative voice'),
            ' and ',
            strong('important!')
        ]),

    ({ aside }) => aside('Your advert may be here!'),

    ({ article, h2, address, a }) =>
        article({
            className : 'vcard',
            children : [
                h2({
                    className : 'fn',
                    children : 'Vyacheslav Aristov'
                }),
                address({
                    className : 'email',
                    children : a({
                        href : 'mailto:vv.aristov@gmail.com',
                        children : 'vv.aristov@gmail.com'
                    })
                })
            ]
        }),

    ({ pre }) => pre(`
_________________________________________________________
____________/          _/                      _/________
___________/_/_/    _/_/_/_/  _/_/_/  _/_/    _/_________
__________/    _/    _/      _/    _/    _/  _/__________
_________/    _/    _/      _/    _/    _/  _/___________
________/    _/      _/_/  _/    _/    _/  _/____________
_________________________________________________________
`),

    ({ pre, style, script }) => pre([
        script(`
            Object.assign(
                document.currentScript.style, {
                    display: 'block',
                    margin: '20px',
                    border: '1px solid #ccc',
                    color: 'blue',
                    font: 'bold 16px monospace'
                })`),
        style({
            id : 'greenstyle',
            children : `
                #greenstyle {
                    display: block;
                    margin: 20px;
                    color: green;
                    border: 1px solid #ccc;
                    font: bold 16px monospace;
                }`
        }),
    ]),

    ({ form, label, input, textarea, span }) =>
        form({
            style : {
                display : 'flex',
                flexDirection : 'column',
                justifyContent : 'space-between',
                height: '200px'
            },
            children : [
                label([
                    'Text input ',
                    input({ placeholder : 'Fill me' })
                ]),
                label([
                    input({ type : 'checkbox' }),
                    ' Simple checkbox'
                ]),
                label([
                    input({ type : 'checkbox', checked : true }),
                    ' Checked checkbox'
                ]),
                label([
                    input({ type : 'checkbox', attrset : { checked : '' } }),
                    ' Initially checked checkbox'
                ]),
                label([
                    input({ type : 'checkbox', indeterminate : true }),
                    ' Indeterminate checkbox'
                ]),
                span([
                    label([
                        input({
                            type : 'radio',
                            name : 'chooseproglangradio',
                            value : 'html'
                        }),
                        ' HTML '
                    ]),
                    label([
                        input({
                            type : 'radio',
                            name : 'chooseproglangradio',
                            value : 'xml'
                        }),
                        ' XML'
                    ])
                ]),
                input({ type : 'reset', style : { margin : '0 auto 0 0' } })
            ]
        }),

    ({ form, label, select, option, br }) =>
        form([
            label([
                'Select technology ',
                select([
                    option('XML'),
                    option('HTML'),
                    option({ selected : true, textContent : 'WAI-ARIA' }),
                    option('RDFS'),
                    option('OWL'),
                    option('SGML'),
                    option('CSS')
                ])
            ]),
            br(),
            label([
                'Select technology stack',
                br(),
                select({
                    multiple : true,
                    children : [
                        option('XML'),
                        option({
                            attrset : { selected : '' },
                            textContent : 'HTML'
                        }),
                        option('WAI-ARIA'),
                        option('RDFS'),
                        option('OWL'),
                        option('SGML'),
                        option('CSS')
                    ]})
            ]),
        ]),

    ({ form, input, button }) =>
        form({
            style : { whiteSpace : 'nowrap' },
            children : [
                input({
                    name : 'query',
                    placeholder : 'type your request',
                    type : 'search',
                    style : { marginRight : '5px' }
                }),
                button('search')
            ]
        }),

    ({ iframe, dialog, p, button }) => {
        const onclick = 'event.target.parentElement.close()';
        const srcdom = dialog([
            p('Close dialog?'),
            button({
                attrset : { onclick },
                children : 'Ok'
            }),
            ' ',
            button('Cancel')
        ]);
        const context = iframe({
            width: '100%',
            height: '50%',
            style : { boxSizing : 'border-box' },
            onmouseover : () => {
                context.contentDocument.querySelector('dialog').showModal()
            },
            srcdoc : srcdom.outerHTML
        });
        return context;
    },

    ({ table, caption, thead, tr, th, abbr, tbody, code, td }) =>
        table({
            style : { width : '100%', textAlign : 'center' },
            children : [
                caption('Relative concept'),
                thead(tr([ th(abbr('HTML')), th(abbr('ARIA')) ])),
                tbody([
                    ['HTMLElement', 'roletype'],
                    ['hidden', 'aria-hidden'],
                    ['title', 'aria-label'],
                    ['—', 'aria-pressed'],
                    ['checked', 'aria-checked'],
                    ['selected', 'aria-selected'],
                    ['disabled', 'aria-disabled'],
                    ['button', 'button'],
                    ['a, link, area', 'link'],
                    ['input', 'textbox'],
                    ['combobox', 'select'],
                    ['table', 'table']
                ].map(([xml, html]) => tr([ td(code(xml)), td(code(html)) ])))
            ]
        }),

    ({ hgroup, h1, h2, h3, h4, h5, h6 }) =>
        hgroup([
            h1('HTML is amazing!'),
            h2('HTML is amazing!'),
            h3('HTML is amazing!'),
            h4('HTML is amazing!'),
            h5('HTML is amazing!'),
            h6('HTML is amazing!'),
            h5('HTML is amazing!'),
            h4('HTML is amazing!'),
            h3('HTML is amazing!'),
            h2('HTML is amazing!'),
            h1('HTML is amazing!'),
        ]),

    ({ blockquote }) =>
        blockquote({
            cite : 'https://html.spec.whatwg.org/' +
                'multipage/semantics.html#the-blockquote-element',
            children : 'The blockquote element represents ' +
                'a section that is quoted from another source.'
        }),

    ({ progress }) => progress({ max : '100', value : '70' }),

    ({ meter }) => meter({
        value : 4,
        min : 0,
        max : 10,
        low : 3,
        high : 7,
        optimum : 5
    }),

    ({ article, section, ruby, rt, rp }) =>
        article({
            title : 'Ruby annotations',
            children : [
                section([
                    ruby(['君', rt('くん')]),
                    ruby(['子', rt('し')]),
                    'は',
                    ruby(['和', rt('わ')]),
                    'して',
                    ruby(['同', rt('どう')]),
                    'ぜず。'
                ]),
                section(ruby([
                    '漢',
                    rp(' ('),
                    rt('かん'),
                    rp(')'),
                    '字',
                    rp(' ('),
                    rt('じ'),
                    rp(')')
                ]))
            ]
        }),

    ({ article, ul, li, ol, dl, dt, dd }) =>
        article({
            title : 'Various lists',
            children : [
                ul([
                    li('Node'),
                    li('Text'),
                    li('Element'),
                    li('Comment')
                ]),
                ol([
                    li('form'),
                    li('input'),
                    li('textarea'),
                    li('select')
                ]),
                dl([
                    dt('DOM'),
                    dd('Document object model'),
                    dt('XML'),
                    dd('Extensible markup language'),
                    dt('HTML'),
                    dd('Hyper text markup language'),
                    dt('SVG'),
                    dd('Scalable vector graphics')
                ])
            ]
        }),

];
