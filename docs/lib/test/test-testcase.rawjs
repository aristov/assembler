export default [

    ({ fieldset, legend, input }) => fieldset([
        legend('Authorization'),
        input({
            placeholder : 'login',
            style : { marginRight : '5px' }
        }),
        input({
            type : 'password',
            placeholder : 'password'
        })
    ]),

    ({ article, h4, img, audio, video }) => article({
        title : 'Media',
        children : [
            h4('Image media'),
            img({
                src : 'https://ru.gravatar.com/userimage/52340111/ab1960afc0c60ebb85f9c7ea8ab66514.jpg?size=200',
                alt : 'Crazy PiPi!'
            }),
            h4('Audio media'),
            audio({
                controls : true,
                src : 'https://upload.wikimedia.org/wikipedia/commons/0/05/Beep-09.ogg'
            }),
            h4('Video media'),
            video({
                controls : true,
                width : '200',
                src : 'https://upload.wikimedia.org/wikipedia/commons/8/8f/Video_Vortex_-_Open_Beelden_-_70605.ogv'
            })
        ]
    }),

    ({ header, nav, a, ul, li }) => header(
        nav(ul([
            li(a({
                href : '/home.html',
                textContent : 'Go home'
            })),
            li(a({
                href : 'http://github.com/aristov',
                textContent : 'Github page'
            })),
            li(a({
                href : 'mailto:vv.aristov@gmail.com',
                textContent : 'Contact me'
            }))
        ]))),

    ({ div, ul, li, bdi, bdo }) => {
        const children = 'АРОЗАУПАЛА';
        return div([
            div([
                children,
                'Н',
                bdo({ dir : 'rtl', children })
            ]),
            ul([
                li([
                    'User ',
                    bdi('jcranmer'),
                    ': 12 posts.'
                ]),
                li([
                    'User ',
                    bdi('hober'),
                    ': 5 posts.'
                ]),
                li([
                    'User ',
                    bdi('إيان'),
                    ': 3 posts.'
                ])
            ])
        ])
    },

    ({ fieldset, legend, button, br, input, output }) => fieldset([
        legend('Event handlers'),
        button({
            style : { marginRight : '10px' },
            onclick : ({
                type,
                target : { tagName },
                constructor : { name }
            }) => alert([tagName, type, name, 'handler!'].join(' ')),
            textContent : 'Show me alert, please...'
        }),
        br(),
        button({
            style : { marginRight : '10px' },
            onfocus : ({ target }) => target.textContent = 'Focused!',
            onblur : ({ target }) => target.textContent = 'Focus wait...',
            textContent : 'Focus wait...'
        }),
        br(),
        input({
            style : { marginRight : '10px' },
            placeholder : 'text input char counter',
            oninput : ({ target }) => {
                target.nextElementSibling.value = target.value.length;
            }
        }),
        output({ value : '0' })
    ]),

    ({ footer, address, small }) => footer([
        address('vv.aristov@gmail.com'),
        small('@ All rights free')
    ]),

    ({ main, sup, sub, i, strong }) => main([
        'Here comes ',
        sup('supertext'),
        ' and ',
        sub('subtext'),
        '. Later they are followed by ',
        i('alternative voice'),
        ' and ',
        strong('important!')
    ]),

    ({ dl, dt, dd, abbr, ins, del, b, s, em }) => dl([
        dt('Abbreviations'),
        dd([
            abbr({
                title : 'Extensible markup language',
                children : 'XML' }),
            abbr({
                title : 'Scalable vector graphics',
                children : 'SVG' }),
            abbr({
                title : 'Interface definition language',
                children : 'IDL' })
        ]),
        dt('Edits'),
        dd([ins('Inserted'), ' and ', del('deleted'), ' text']),
        dt('Keywords'),
        dd([b('var'), b('function'), b('export'), b('const')]),
        dt('Other'),
        dd([s('don\'t stroke me!'), ' + ', em('emphasize!')])
    ]),

    ({ aside }) => aside('Your advert may be here!'),

    ({ article, h2, address }) => article({
        className : 'vcard',
        children : [
            h2({
                className : 'fn',
                children : 'Vyacheslav Aristov'
            }),
            address({
                className : 'email',
                children : 'vv.aristov@gmail.com'
            })
        ]
    }),

    ({ pre }) => pre(`
_________________________________________________________
____________/          _/                      _/________
___________/_/_/    _/_/_/_/  _/_/_/  _/_/    _/_________
__________/    _/    _/      _/    _/    _/  _/__________
_________/    _/    _/      _/    _/    _/  _/___________
________/    _/      _/_/  _/    _/    _/  _/____________
_________________________________________________________
`),

    ({ pre, style, script }) => pre([
        script(`
            Object.assign(
                document.currentScript.style, {
                    display: 'block',
                    color: 'blue',
                    fontFamily : 'monospace'
                })`),
        style({
            id : 'greenstyle',
            children : `
                #greenstyle {
                    display: block;
                    color: green;
                    font-family: monospace
                }`
        }),
    ]),

    ({ form, label, input, textarea, span }) => form({
        style : {
            display : 'flex',
            flexDirection : 'column',
            justifyContent : 'space-between',
            height: '200px'
        },
        children : [
            label([
                'Text input ',
                input({ placeholder : 'Fill me' })
            ]),
            label([
                input({ type : 'checkbox' }),
                ' Simple checkbox'
            ]),
            label([
                input({ type : 'checkbox', checked : true }),
                ' Checked checkbox'
            ]),
            label([
                input({ type : 'checkbox', attrset : { checked : '' } }),
                ' Initially checked checkbox'
            ]),
            label([
                input({ type : 'checkbox', indeterminate : true }),
                ' Indeterminate checkbox'
            ]),
            span([
                label([
                    input({
                        type : 'radio',
                        name : 'chooseproglangradio',
                        value : 'html'
                    }),
                    ' HTML '
                ]),
                label([
                    input({
                        type : 'radio',
                        name : 'chooseproglangradio',
                        value : 'xml'
                    }),
                    ' XML'
                ])
            ]),
            input({ type : 'reset', style : { margin : '0 auto 0 0' } })
        ]
    }),

    ({ form, label, select, option, br }) => form([
        label([
            'Select technology ',
            select([
                option('XML'),
                option('HTML'),
                option({ selected : true, textContent : 'WAI-ARIA' }),
                option('RDFS'),
                option('OWL'),
                option('SGML'),
                option('CSS')
            ])
        ]),
        br(),
        label([
            'Select technology stack',
            br(),
            select({
                multiple : true,
                children : [
                    option('XML'),
                    option({
                        attrset : { selected : '' },
                        textContent : 'HTML'
                    }),
                    option('WAI-ARIA'),
                    option('RDFS'),
                    option('OWL'),
                    option('SGML'),
                    option('CSS')
                ]})
        ]),
        br()
    ]),

    ({ form, input, button }) => form({
        style : { whiteSpace : 'nowrap' },
        children : [
            input({
                name : 'query',
                placeholder : 'type your request',
                type : 'search',
                style : { marginRight : '5px' }
            }),
            button('search')
        ]
    }),

    ({ iframe, dialog, p, button }) => {
        const onclick = 'event.target.parentElement.close()';
        const srcdom = dialog([
            p('Close dialog?'),
            button({
                attrset : { onclick },
                children : 'Ok'
            }),
            ' ',
            button('Cancel')
        ]);
        const context = iframe({
            width: '100%',
            height: '50%',
            style : { boxSizing : 'border-box' },
            onmouseover : () => {
                context.contentDocument.querySelector('dialog').showModal()
            },
            srcdoc : srcdom.outerHTML
        });
        return context;
    },

    ({ table, caption, thead, tr, th, abbr, tbody, code, td }) =>
        table([
            caption('relative concept'),
            thead(tr([ th(abbr('HTML')), th(abbr('ARIA')) ])),
            tbody([
                [code('HTMLElement'), code('roletype')],
                [code('hidden'), code('aria-hidden')],
                [code('title'), code('aria-label')],
                [code('—'), code('aria-pressed')],
                [code('checked'), code('aria-checked')],
                [code('selected'), code('aria-selected')],
                [code('disabled'), code('aria-disabled')],
                [code('button'), code('button')],
                [code('a, link, area'), code('link')],
                [code('input'), code('textbox')],
                [code('combobox'), code('select')],
                [code('table'), code('table')]
            ].map(([xml, html]) => tr([ td(xml), td(html) ])))
        ]),

    ({ hgroup, h1, h2, h3, h4, h5, h6 }) =>
        hgroup([
            h1('First level heading'),
            h2('Second level heading'),
            h3('Third level heading'),
            h4('Fourth level heding'),
            h5('Fifth level heding'),
            h6('Sixth level heding in group')
        ]),

    ({ blockquote }) => blockquote({
        cite : 'https://html.spec.whatwg.org/' +
            'multipage/semantics.html#the-blockquote-element',
        children : 'The blockquote element represents ' +
            'a section that is quoted from another source.'
    }),

    ({ article, section, ruby, rt, rp }) => article({
        title : 'Ruby annotations',
        children : [
            section([
                ruby(['君', rt('くん')]),
                ruby(['子', rt('し')]),
                'は',
                ruby(['和', rt('わ')]),
                'して',
                ruby(['同', rt('どう')]),
                'ぜず。'
            ]),
            section(ruby([
                '漢',
                rp(' ('),
                rt('かん'),
                rp(')'),
                '字',
                rp(' ('),
                rt('じ'),
                rp(')')
            ]))
        ]
    }),

    ({ article, ul, li, ol, dl, dt, dd }) => article({
        title : 'Various lists',
        children : [
            ul([
                li('Ampeg'),
                li('Fender'),
                li('SMB Effects')
            ]),
            ol([
                li('Amsterdam'),
                li('New York'),
                li('Moscow')
            ]),
            dl([
                dt('DOM'),
                dd('Document object model'),
                dt('XML'),
                dd('Extensible markup language'),
                dt('HTML'),
                dd('Hyper text markup language'),
                dt('ARIAML'),
                dd('Accessible rich internet applications markup language')
            ])
        ]
    }),

    ({ progress }) => progress({ max : '100', value : '70' })

];
