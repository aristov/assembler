htmlmodule => {
    const {
        // Generic
        article, section, header, footer,
        // Specialized
        address, aside, nav,
        // Headings
        h1, h2, h3, h4, h5, h6, hgroup,
        // Other
        a, hr, p
    } = htmlmodule;

    const anchor = a({ href : '#$1', children : '$1' });

    const text = ['This `article` element contains',
        'the `header`, `section`, `aside` and `footer` elements.',
        'The `header` element contains the main heading',
        'and `nav` with this introductional text.',
        'The `section` element contains `hgroup` with some headings.',
        'The `aside` element contains the related project announce.',
        'The `footer` element contains `address`.'].join(' ');
    const children = p({
        innerHTML : text.replace(/`(\w+)`/g, anchor.outerHTML)
    });
    return article([
        header([
            h1('Sections'),
            nav({ onclick, children })
        ]),
        hr(),
        aside(((text, ...hh) => {
            const group = [...hh.slice(1).reverse(), ...hh];
            return hgroup(group.map(hx => hx(text)));
        })('HTML is amazing', h2, h3, h4, h5, h6)),
        hr(),
        section([
            h1('Section'),
            p('Generic document or application section.')
        ]),
        hr(),
        footer([
            p('Last modified: ' + new Date),
            address([
                'Author: ',
                a({
                    href : 'mailto:vv.aristov@gmail.com',
                    rel : 'author',
                    children : 'vv.aristov@gmail.com'
                })
            ])
        ]),
    ]);
    function onclick(event) {
        event.preventDefault();
        const target = event.target;
        if(target.hash) {
            const name = target.hash.slice(1);
            const document = target.ownerDocument;
            const node = document.getElementsByTagName(name)[0];
            if(node) {
                node.tabIndex = -1;
                node.focus();
                if(!node.onblur) node.onblur = () => {
                    node.removeAttribute('tabindex');
                }
            }
        }
    }
}
