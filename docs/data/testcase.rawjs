/**
 * !!! THIS FILE REQUIRES THE ADDITIONAL SYNTAX RESTRICTIONS !!!
 *
 * The processing script (./index.js):
 *  - imports this file as a raw source
 *  - splits the file by '\n\n' (double line break)
 *  - removes trailing comma from each chunk
 *  - omits the first (this message) and the last (trailing square bracket) chunks
 *  - provides the rest as a sitedata sources array
 *
 * This procedure is used to avoid mangling the initial codestyle by Babel.
 */
[

({ form, label, img, br, input, button }) =>
    form({
        action : 'https://yandex.ru/search',
        target : '_blank',
        children : [
            label([
                img({
                    src : 'http://bit.ly/2dgU2dO',
                    alt : 'Яндекс',
                    width : 50
                }),
                br(),
                input({
                    type : 'search',
                    name : 'text'
                }),
                ' '
            ]),
            button('Найти')
        ]
    }),

({ fieldset, legend, section, button, label, input, output, style }) => {
    const textContent = 'Give me a focus, please...';
    const focusbutton = button({
        onfocus : ({ target }) => target.textContent = 'Focused!',
        onblur : ({ target }) => target.textContent = textContent,
        textContent
    });
    const alertbutton = button({
        onclick : ({
            type,
            target : { tagName },
            constructor : { name }
        }) => alert([tagName, type, name, 'handler!'].join(' ')),
        children : 'Show me an alert, please...',
        style : { marginRight: '10px' }
    });
    const noalertbox = label([
        input({
            type : 'checkbox',
            onchange : ({ target }) => {
                alertbutton.disabled = target.checked;
            },
        }),
        ' no alerts!'
    ]);
    const charcountbox = label([
        input({
            placeholder : 'Count my chars, please...',
            oninput : ({ target }) => {
                charcountbox.lastChild.value = target.value.length;
            },
            style : { marginRight: '10px' }
        }),
        output({ title : 'Entered char count', value : '0' })
    ]);
    return fieldset([
        legend('Event handlers'),
        section(focusbutton),
        section([alertbutton, noalertbox]),
        section(charcountbox),
        style('section { margin: 20px 0 }')
    ]);
},

({ form, fieldset, legend, input, button }) =>
    form(fieldset([
        legend('Authorization'),
        input({
            placeholder : 'Login',
        }),
        input({
            type : 'Password',
            placeholder : 'password',
            style : { margin : '0 5px' }
        }),
        button('Enter')
    ])),

({ form, label, input, textarea, select, option, hr, br, span }) =>
    form({
        style : {
            display : 'flex',
            flexDirection : 'column',
            justifyContent : 'space-between',
            height: '350px'
        },
        children : [
            label([
                'Text input ',
                input({ placeholder : 'Fill me' })
            ]),
            label([
                input({ type : 'checkbox' }),
                ' Simple checkbox'
            ]),
            label([
                input({ type : 'checkbox', checked : true }),
                ' Checked checkbox'
            ]),
            label([
                input({ type : 'checkbox', attrset : { checked : '' } }),
                ' Initially checked checkbox'
            ]),
            label([
                input({ type : 'checkbox', indeterminate : true }),
                ' Indeterminate checkbox'
            ]),
            span([
                label([
                    input({
                        type : 'radio',
                        name : 'chooseproglangradio',
                        value : 'html'
                    }),
                    ' HTML '
                ]),
                label([
                    input({
                        type : 'radio',
                        name : 'chooseproglangradio',
                        value : 'xml'
                    }),
                    ' XML'
                ])
            ]),
            label([
                'Select the technology ',
                select([
                    option('XML'),
                    option('HTML'),
                    option({ selected : true, children : 'WAI-ARIA' }),
                    option('RDFS'),
                    option('OWL'),
                    option('SGML'),
                    option('CSS')
                ])
            ]),
            label([
                'Select the technology stack',
                br(),
                select({
                    multiple : true,
                    style : { width : '180px' },
                    children : [
                        option('XML'),
                        option({
                            selected : true,
                            children : 'HTML'
                        }),
                        option('WAI-ARIA'),
                        option('RDFS'),
                        option({
                            selected : true,
                            children : 'OWL'
                        }),
                        option('SGML'),
                        option({
                            selected : true,
                            children : 'CSS'
                        })
                    ]})
            ]),
            input({ type : 'reset', style : { width : '100px' } }),
        ]
    }),

({ pre }) => pre(`
_________________________________________________________
____________/          _/                      _/________
___________/_/_/    _/_/_/_/  _/_/_/  _/_/    _/_________
__________/    _/    _/      _/    _/    _/  _/__________
_________/    _/    _/      _/    _/    _/  _/___________
________/    _/      _/_/  _/    _/    _/  _/____________
_________________________________________________________
`),

({ table, caption, thead, tr, th, abbr, tbody, code, td }) =>
    table({
        style : { width : '100%', textAlign : 'center' },
        children : [
            caption('Equivalent semantics'),
            thead(tr([ th(abbr('HTML')), th(abbr('WAI-ARIA')) ])),
            tbody([
                ['button', 'button'],
                ['a, link, area', 'link'],
                ['input', 'textbox'],
                ['select', 'combobox'],
                ['table', 'table, grid'],
                ['ul, ol', 'list'],
                ['hidden', 'aria-hidden'],
                ['title', 'aria-label'],
                ['checked', 'aria-checked'],
                ['selected', 'aria-selected'],
                ['disabled', 'aria-disabled'],
                ['indeterminate', 'mixed'],
            ].map(([xml, html]) => tr([ td(code(xml)), td(code(html)) ])))
        ]
    }),

({ hgroup, h1, h2, h3, h4, h5, h6 }) => {
    const hh = [h1, h2, h3, h4, h5, h6];
    const ht = 'HTML is amazing';
    return hgroup([...hh.slice(1).reverse(), ...hh].map(h => h(ht)));
},

({
    a, i, strong, sup, sub, abbr, ins, del, b, s, em, code,
    div, h1, hr, address, small, ul, ol, li, blockquote,
    article, header, main, footer, section, aside,
    ruby, rt, rp, bdi, bdo,
    progress, meter,
}) => {
    const children = 'АРОЗАУПАЛА';
    return div([
        header([
            'Here comes ',
            sup('supertext'),
            ' and ',
            sub('subtext'),
            '. Later they are followed by ',
            i('alternative voice'),
            ' and ',
            strong('important!'),
            hr(),
            blockquote({
                cite : 'https://html.spec.whatwg.org/' +
                    'multipage/semantics.html#the-blockquote-element',
                children : 'The blockquote element represents ' +
                    'a section that is quoted from another source.'
            }),
            hr(),
            aside('Your advert may be here!'),
        ]),
        hr(),
        main([
            article({
                title : 'Various lists',
                children : [
                    ul([
                        li('Node'),
                        li('Text'),
                        li('Element'),
                        li('Comment'),
                        li('Document'),
                        li('CharacterData'),
                    ]),
                    ol([
                        li('null'),
                        li('Object'),
                        li('EventTarget'),
                        li('Node'),
                        li('Element'),
                        li('HTMLElement'),
                        li('HTMLLIElement'),
                    ]),
                ]
            }),
            hr(),
            article([
                section([
                    h1('Abbreviations'),
                    abbr({
                        title : 'Extensible markup language',
                        children : 'XML'
                    }), ' ',
                    abbr({
                        title : 'Scalable vector graphics',
                        children : 'SVG'
                    }), ' ',
                    abbr({
                        title : 'Interface definition language',
                        children : 'IDL'
                    })
                ]),
                section([
                    h1('Edits'),
                    ins('Inserted'),
                    ' and ',
                    del('deleted'),
                    ' text',
                ]),
                section([
                    h1('Code keywords'),
                    code([
                        b('var'), ' ',
                        b('function'), ' ',
                        b('export'), ' ',
                        b('const')
                    ]),
                ]),
            ]),
            hr(),
            meter({
                value : 4, min : 0, max : 10,
                low : 3, high : 7, optimum : 5 }),
            hr(),
            article({
                title : 'Ruby annotations',
                children : [
                    section([
                        ruby(['君', rt('くん')]),
                        ruby(['子', rt('し')]), 'は',
                        ruby(['和', rt('わ')]), 'して',
                        ruby(['同', rt('どう')]), 'ぜず。'
                    ]),
                    section(ruby([
                        '漢', rp(' ('), rt('かん'), rp(')'),
                        '字', rp(' ('), rt('じ'), rp(')')
                    ]))
                ]
            }),
        ]),
        hr(),
        footer([
            progress({ max : '100', value : '70' }),
            hr(),
            address('vv.aristov@gmail.com'),
            hr(),
            div([
                div([
                    children,
                    'Н',
                    bdo({ dir : 'rtl', children })
                ]),
                ul([
                    li(['User ',
                        bdi('jcranmer'),
                        ': 12 posts.']),
                    li(['User ',
                        bdi('hober'),
                        ': 5 posts.']),
                    li(['User ',
                        bdi('إيان'),
                        ': 3 posts.'])
                ])
            ]),
            hr(),
            small('@ All rights are free')
        ])
    ]);
},

({ pre, script, style }) => {
    const tab = ' '.repeat(4);
    const src = () => Object.assign(
        document.currentScript.style,
        {
            display : 'block',
            margin : '20px',
            padding : '20px',
            boxShadow : '0 0 5px 5px #ccc',
            color : 'blue',
            font : '13px monospace'
        });
    return pre([
        script(tab + `(${ src.toString() })()`),
        style(tab.repeat(2) + `style 
        {
            display: block;
            margin: 20px;
            padding: 20px;
            color: green;
            box-shadow: 0 0 5px 5px #ccc;
            font: 13px monospace;
        }`)
    ])
},

({ article, code, pre, style }) => {
    const fetch = window.fetch;
    const files = ['index.html', 'docs/index.js', 'docs/index.css'];
    Promise
        .all(files.map(file => {
            return fetch(file).then(res => res.text());
        }))
        .then(function(sources) {
            sources.forEach((src, i) => {
                node.append(code(files[i]), pre(code(src)));
            });
        });
    const node = article(style(`
    pre { margin-top: 1px }
    pre > code {
        display: block;
        background: #313;
        color: white;
        padding: 12px;
        margin-bottom: 20px;
    }
`));
    return node;
},

htmlmodule => {
    const { nav, h1, ul, li, a, style } = htmlmodule;
    const keys = Object.keys(htmlmodule).filter(key => !/^[A-Z]/.test(key));
    const path = './docs/api/function/index.html#static-function-';
    return nav([
        h1('API index'),
        ul(keys.map(key => li(a({
            href : path + key,
            target : '_blank',
            children : key
        })))),
        style(`
            ul { column-count: 3; list-style: none }
            ul > li {
                line-height: 25px;
                font-family: monospace;
            }
            a[href]:not(:hover):not(:focus):not(:active) {
                text-decoration: none;
            }`)
    ]);
},

({ iframe }) => iframe({
    src : 'docs/spec.html',
    width : '100%',
    height : '100%',
    style : { border : 'none' }
}),

]
