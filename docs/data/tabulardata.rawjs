htmlmodule => {
    const {
        table, caption, thead, tbody,
        tfoot, tr, th, td, col, colgroup,
        a, abbr, article, h1, input,
        p, style, label
    } = htmlmodule;

    const roles = [
        ['button', 'button'],
        ['a, link, area', 'link'],
        ['input', 'textbox'],
        ['select', 'combobox'],
        ['table', 'table, grid'],
        ['ul, ol, dl', 'list'],
    ];
    const attributes = [
        ['hidden', 'aria-hidden'],
        ['title', 'aria-label, aria-labelledby'],
        ['checked', 'aria-checked'],
        ['selected', 'aria-selected'],
        ['disabled', 'aria-disabled'],
        ['indeterminate', 'mixed'],
    ];
    let htmlcount = 0;
    let ariacount = 0;

    function rowgroup(items, name) {
        return items.map(([htmlterm, ariaterm], i) => {
            htmlcount += htmlterm.split(', ').length;
            ariacount += ariaterm.split(', ').length;
            return tr([
                !i && th({
                    rowSpan : items.length,
                    children : name,
                }),
                td(htmlterm),
                td(ariaterm)
            ]);
        })
    }
    const stylesheet = style([
        'table { width: 100%; border-collapse: collapse }',
        'caption { padding: 15px }',
        'thead, tfoot { background: #eee }',
        'th, td { padding: 4px }',
        'tr:last-child td, tr th  { border-bottom: 4px solid #eee }'
    ]);
    return article([
        h1('Tabular data'),
        table([
            caption('Related web technology semantics'),
            colgroup(col()),
            colgroup([col(), col()]),
            thead(tr([
                th('Standard'),
                th(abbr('HTML')),
                th(abbr('WAI-ARIA'))
            ])),
            tbody(rowgroup(roles, 'Roles')),
            tbody(rowgroup(attributes, 'Attributes')),
            tfoot(tr([
                th('Total'),
                th(String(htmlcount)),
                th(String(ariacount))
            ]))
        ]),
        label({
            style : {
                fontSize : 'small',
                position : 'absolute',
                top : '8px',
                right: '16px',
            },
            title : 'Use this style box to switch table styling on/off',
            children : [
                input({
                    id : 'stylebox',
                    type : 'checkbox',
                    checked : true,
                    onchange : ({ target }) => {
                        const { body } = target.ownerDocument;
                        target.checked?
                            body.appendChild(stylesheet) :
                            stylesheet.remove();
                    },
                }),
                ' apply styling'
            ],
        }),
        stylesheet
    ])
}
